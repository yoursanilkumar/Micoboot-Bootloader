
Boot_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080039a0  080039a0  000049a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a14  08003a14  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a18  08003a18  00004a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003a1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000010  08003a2c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08003a2c  000055f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b052  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc9  00000000  00000000  00010092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00012c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bd  00000000  00000000  00013990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f04  00000000  00000000  0001434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e31f  00000000  00000000  0002c251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089587  00000000  00000000  0003a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003140  00000000  00000000  000c3b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c6c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003988 	.word	0x08003988

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003988 	.word	0x08003988

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80004ce:	f000 f924 	bl	800071a <CopService>
 80004d2:	e7fc      	b.n	80004ce <AssertFailure+0xa>

080004d4 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <BackDoorInit+0x18>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 80004de:	f000 f82d 	bl	800053c <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 80004e2:	f000 f805 	bl	80004f0 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c

080004f0 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80004f4:	f000 f8fa 	bl	80006ec <ComIsConnected>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d015      	beq.n	800052a <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <BackDoorCheck+0x40>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d112      	bne.n	800052c <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000506:	f001 f8a5 	bl	8001654 <TimerGet>
 800050a:	4601      	mov	r1, r0
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <BackDoorCheck+0x44>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <BackDoorCheck+0x48>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4413      	add	r3, r2
 8000516:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800051a:	4299      	cmp	r1, r3
 800051c:	d306      	bcc.n	800052c <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 800051e:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <BackDoorCheck+0x40>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8000524:	f000 f906 	bl	8000734 <CpuStartUserProgram>
 8000528:	e000      	b.n	800052c <BackDoorCheck+0x3c>
    return;
 800052a:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000034 	.word	0x20000034
 8000538:	20000030 	.word	0x20000030

0800053c <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <BackDoorRestartTimer+0x1c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d104      	bne.n	8000552 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8000548:	f001 f884 	bl	8001654 <TimerGet>
 800054c:	4603      	mov	r3, r0
 800054e:	4a03      	ldr	r2, [pc, #12]	@ (800055c <BackDoorRestartTimer+0x20>)
 8000550:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000002c 	.word	0x2000002c
 800055c:	20000030 	.word	0x20000030

08000560 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8000564:	f000 f8df 	bl	8000726 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000568:	f000 f8d1 	bl	800070e <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800056c:	f000 ffd2 	bl	8001514 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000570:	f000 fd24 	bl	8000fbc <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000574:	f000 f810 	bl	8000598 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000578:	f7ff ffac 	bl	80004d4 <BackDoorInit>
} /*** end of BootInit ***/
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8000584:	f000 f8c9 	bl	800071a <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000588:	f001 f82a 	bl	80015e0 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800058c:	f000 f812 	bl	80005b4 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000590:	f7ff ffae 	bl	80004f0 <BackDoorCheck>
} /*** end of BootTask ***/
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 800059c:	f001 f86c 	bl	8001678 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 80005a0:	f000 fdae 	bl	8001100 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <ComInit+0x18>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000

080005b4 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <ComTask+0x30>)
 80005c0:	f000 fdf2 	bl	80011a8 <Rs232ReceivePacket>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d107      	bne.n	80005da <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <ComTask+0x34>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <ComTask+0x30>)
 80005d6:	f001 f891 	bl	80016fc <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000038 	.word	0x20000038
 80005e8:	20000000 	.word	0x20000000

080005ec <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <ComTransmitPacket+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d105      	bne.n	800061c <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fd9a 	bl	8001150 <Rs232TransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 800061c:	f001 f860 	bl	80016e0 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000

0800062c <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <ComGetActiveInterfaceMaxRxLen+0x5c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d81b      	bhi.n	8000672 <ComGetActiveInterfaceMaxRxLen+0x46>
 800063a:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <ComGetActiveInterfaceMaxRxLen+0x14>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000655 	.word	0x08000655
 8000644:	0800065b 	.word	0x0800065b
 8000648:	08000661 	.word	0x08000661
 800064c:	08000667 	.word	0x08000667
 8000650:	0800066d 	.word	0x0800066d
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8000654:	2308      	movs	r3, #8
 8000656:	80fb      	strh	r3, [r7, #6]
      break;
 8000658:	e00e      	b.n	8000678 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_RX_MAX_DATA;
 800065a:	2300      	movs	r3, #0
 800065c:	80fb      	strh	r3, [r7, #6]
      break;
 800065e:	e00b      	b.n	8000678 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8000660:	2308      	movs	r3, #8
 8000662:	80fb      	strh	r3, [r7, #6]
      break;
 8000664:	e008      	b.n	8000678 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8000666:	233f      	movs	r3, #63	@ 0x3f
 8000668:	80fb      	strh	r3, [r7, #6]
      break;
 800066a:	e005      	b.n	8000678 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 800066c:	2381      	movs	r3, #129	@ 0x81
 800066e:	80fb      	strh	r3, [r7, #6]
      break;
 8000670:	e002      	b.n	8000678 <ComGetActiveInterfaceMaxRxLen+0x4c>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8000672:	2381      	movs	r3, #129	@ 0x81
 8000674:	80fb      	strh	r3, [r7, #6]
      break;
 8000676:	bf00      	nop
  }

  return result;
 8000678:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000

0800068c <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <ComGetActiveInterfaceMaxTxLen+0x5c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b04      	cmp	r3, #4
 8000698:	d81b      	bhi.n	80006d2 <ComGetActiveInterfaceMaxTxLen+0x46>
 800069a:	a201      	add	r2, pc, #4	@ (adr r2, 80006a0 <ComGetActiveInterfaceMaxTxLen+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b5 	.word	0x080006b5
 80006a4:	080006bb 	.word	0x080006bb
 80006a8:	080006c1 	.word	0x080006c1
 80006ac:	080006c7 	.word	0x080006c7
 80006b0:	080006cd 	.word	0x080006cd
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80006b4:	2308      	movs	r3, #8
 80006b6:	80fb      	strh	r3, [r7, #6]
      break;
 80006b8:	e00e      	b.n	80006d8 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_TX_MAX_DATA;
 80006ba:	2300      	movs	r3, #0
 80006bc:	80fb      	strh	r3, [r7, #6]
      break;
 80006be:	e00b      	b.n	80006d8 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80006c0:	2308      	movs	r3, #8
 80006c2:	80fb      	strh	r3, [r7, #6]
      break;
 80006c4:	e008      	b.n	80006d8 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 80006c6:	233f      	movs	r3, #63	@ 0x3f
 80006c8:	80fb      	strh	r3, [r7, #6]
      break;
 80006ca:	e005      	b.n	80006d8 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 80006cc:	2381      	movs	r3, #129	@ 0x81
 80006ce:	80fb      	strh	r3, [r7, #6]
      break;
 80006d0:	e002      	b.n	80006d8 <ComGetActiveInterfaceMaxTxLen+0x4c>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 80006d2:	2381      	movs	r3, #129	@ 0x81
 80006d4:	80fb      	strh	r3, [r7, #6]
      break;
 80006d6:	bf00      	nop
  }

  return result;
 80006d8:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000

080006ec <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 80006f6:	f000 ffe1 	bl	80016bc <XcpIsConnected>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8000700:	2301      	movs	r3, #1
 8000702:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8000704:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000712:	f000 fbdf 	bl	8000ed4 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800071e:	f000 fbe0 	bl	8000ee2 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 800072a:	f000 f853 	bl	80007d4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800073a:	f000 fc63 	bl	8001004 <NvmVerifyChecksum>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d01c      	beq.n	800077e <CpuStartUserProgram+0x4a>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8000744:	f000 fbb4 	bl	8000eb0 <CpuUserProgramStartHook>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d019      	beq.n	8000782 <CpuStartUserProgram+0x4e>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 800074e:	f7ff ff4d 	bl	80005ec <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8000752:	f001 fc13 	bl	8001f7c <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8000756:	f000 ff2b 	bl	80015b0 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x800C000;
 800075a:	f000 fc5a 	bl	8001012 <NvmGetUserProgBaseAddress>
 800075e:	4602      	mov	r2, r0
 8000760:	490a      	ldr	r1, [pc, #40]	@ (800078c <CpuStartUserProgram+0x58>)
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <CpuStartUserProgram+0x5c>)
 8000764:	4013      	ands	r3, r2
 8000766:	608b      	str	r3, [r1, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8000768:	f000 fc53 	bl	8001012 <NvmGetUserProgBaseAddress>
 800076c:	4603      	mov	r3, r0
 800076e:	3304      	adds	r3, #4
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000774:	f000 f836 	bl	80007e4 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4798      	blx	r3
 800077c:	e002      	b.n	8000784 <CpuStartUserProgram+0x50>
    return;
 800077e:	bf00      	nop
 8000780:	e000      	b.n	8000784 <CpuStartUserProgram+0x50>
    return;
 8000782:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	0800c000 	.word	0x0800c000

08000794 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80007aa:	e009      	b.n	80007c0 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	1c53      	adds	r3, r2, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	1c59      	adds	r1, r3, #1
 80007b6:	6139      	str	r1, [r7, #16]
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80007bc:	f7ff ffad 	bl	800071a <CopService>
  while (len-- > 0)
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	80fa      	strh	r2, [r7, #6]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f0      	bne.n	80007ac <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80007d8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 80007e8:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <FlashInit+0x20>)
 80007fa:	f04f 32ff 	mov.w	r2, #4294967295
 80007fe:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <FlashInit+0x24>)
 8000802:	f04f 32ff 	mov.w	r2, #4294967295
 8000806:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200000bc 	.word	0x200000bc
 8000818:	200002c0 	.word	0x200002c0

0800081c <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	491c      	ldr	r1, [pc, #112]	@ (80008a0 <FlashWrite+0x84>)
 800082e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000832:	4419      	add	r1, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	1acb      	subs	r3, r1, r3
 8000838:	3b01      	subs	r3, #1
 800083a:	429a      	cmp	r2, r3
 800083c:	d901      	bls.n	8000842 <FlashWrite+0x26>
  {
    return BLT_FALSE;
 800083e:	2300      	movs	r3, #0
 8000840:	e02a      	b.n	8000898 <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f000 faf0 	bl	8000e28 <FlashGetSector>
 8000848:	4603      	mov	r3, r0
 800084a:	2bff      	cmp	r3, #255	@ 0xff
 800084c:	d009      	beq.n	8000862 <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4413      	add	r3, r2
 8000854:	3b01      	subs	r3, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fae6 	bl	8000e28 <FlashGetSector>
 800085c:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 800085e:	2bff      	cmp	r3, #255	@ 0xff
 8000860:	d101      	bne.n	8000866 <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 8000862:	2300      	movs	r3, #0
 8000864:	e018      	b.n	8000898 <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800086c:	f023 0301 	bic.w	r3, r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8000872:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <FlashWrite+0x88>)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4293      	cmp	r3, r2
 8000878:	d107      	bne.n	800088a <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	68f9      	ldr	r1, [r7, #12]
 8000880:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <FlashWrite+0x8c>)
 8000882:	f000 f967 	bl	8000b54 <FlashAddToBlock>
 8000886:	4603      	mov	r3, r0
 8000888:	e006      	b.n	8000898 <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	68f9      	ldr	r1, [r7, #12]
 8000890:	4806      	ldr	r0, [pc, #24]	@ (80008ac <FlashWrite+0x90>)
 8000892:	f000 f95f 	bl	8000b54 <FlashAddToBlock>
 8000896:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08020000 	.word	0x08020000
 80008a4:	0800c000 	.word	0x0800c000
 80008a8:	200002c0 	.word	0x200002c0
 80008ac:	200000bc 	.word	0x200000bc

080008b0 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4916      	ldr	r1, [pc, #88]	@ (8000918 <FlashErase+0x68>)
 80008c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008c4:	4419      	add	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1acb      	subs	r3, r1, r3
 80008ca:	3b01      	subs	r3, #1
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d901      	bls.n	80008d4 <FlashErase+0x24>
  {
    return BLT_FALSE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e01c      	b.n	800090e <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 faa7 	bl	8000e28 <FlashGetSector>
 80008da:	4603      	mov	r3, r0
 80008dc:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa9e 	bl	8000e28 <FlashGetSector>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	2bff      	cmp	r3, #255	@ 0xff
 80008f4:	d002      	beq.n	80008fc <FlashErase+0x4c>
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d101      	bne.n	8000900 <FlashErase+0x50>
  {
    return BLT_FALSE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	e006      	b.n	800090e <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 8000900:	7bba      	ldrb	r2, [r7, #14]
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fa30 	bl	8000d6c <FlashEraseSectors>
 800090c:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08020000 	.word	0x08020000

0800091c <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <FlashWriteChecksum+0x84>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d101      	bne.n	8000934 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8000930:	2301      	movs	r3, #1
 8000932:	e031      	b.n	8000998 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <FlashWriteChecksum+0x88>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <FlashWriteChecksum+0x8c>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <FlashWriteChecksum+0x90>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <FlashWriteChecksum+0x94>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <FlashWriteChecksum+0x98>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <FlashWriteChecksum+0x9c>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <FlashWriteChecksum+0xa0>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	43db      	mvns	r3, r3
 800097e:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <FlashWriteChecksum+0xa4>)
 8000988:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800098c:	1d3a      	adds	r2, r7, #4
 800098e:	2104      	movs	r1, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff43 	bl	800081c <FlashWrite>
 8000996:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002c0 	.word	0x200002c0
 80009a4:	200002c4 	.word	0x200002c4
 80009a8:	200002c8 	.word	0x200002c8
 80009ac:	200002cc 	.word	0x200002cc
 80009b0:	200002d0 	.word	0x200002d0
 80009b4:	200002d4 	.word	0x200002d4
 80009b8:	200002d8 	.word	0x200002d8
 80009bc:	200002dc 	.word	0x200002dc
 80009c0:	0800c000 	.word	0x0800c000

080009c4 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 80009da:	3304      	adds	r3, #4
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 80009f2:	330c      	adds	r3, #12
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 80009fe:	3310      	adds	r3, #16
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 8000a0a:	3314      	adds	r3, #20
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 8000a16:	3318      	adds	r3, #24
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <FlashVerifyChecksum+0x84>)
 8000a22:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8000a38:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	0800c000 	.word	0x0800c000

08000a4c <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <FlashDone+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d007      	beq.n	8000a6a <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <FlashDone+0x40>)
 8000a5c:	f000 f8dc 	bl	8000c18 <FlashWriteBlock>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e00d      	b.n	8000a86 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <FlashDone+0x44>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a72:	d007      	beq.n	8000a84 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000a74:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <FlashDone+0x44>)
 8000a76:	f000 f8cf 	bl	8000c18 <FlashWriteBlock>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e000      	b.n	8000a86 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8000a84:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002c0 	.word	0x200002c0
 8000a90:	200000bc 	.word	0x200000bc

08000a94 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8000a98:	4b02      	ldr	r3, [pc, #8]	@ (8000aa4 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	0800c000 	.word	0x0800c000

08000aa8 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e012      	b.n	8000ae6 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d101      	bne.n	8000ace <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00b      	b.n	8000ae6 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000adc:	6839      	ldr	r1, [r7, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe58 	bl	8000794 <CpuMemCopy>
  return BLT_TRUE;
 8000ae4:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <FlashSwitchBlock+0x58>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d102      	bne.n	8000b08 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <FlashSwitchBlock+0x5c>)
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	e010      	b.n	8000b2a <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8000b08:	4a11      	ldr	r2, [pc, #68]	@ (8000b50 <FlashSwitchBlock+0x60>)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d104      	bne.n	8000b1a <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <FlashSwitchBlock+0x58>)
 8000b12:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <FlashSwitchBlock+0x60>)
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	e007      	b.n	8000b2a <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f87c 	bl	8000c18 <FlashWriteBlock>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e009      	b.n	8000b3e <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ffbb 	bl	8000aa8 <FlashInitBlock>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e000      	b.n	8000b3e <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000b3c:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200002c0 	.word	0x200002c0
 8000b4c:	200000bc 	.word	0x200000bc
 8000b50:	0800c000 	.word	0x0800c000

08000b54 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b76:	d108      	bne.n	8000b8a <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8000b78:	6979      	ldr	r1, [r7, #20]
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ff94 	bl	8000aa8 <FlashInitBlock>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e042      	b.n	8000c10 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d009      	beq.n	8000ba8 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8000b94:	6979      	ldr	r1, [r7, #20]
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff ffaa 	bl	8000af0 <FlashSwitchBlock>
 8000b9c:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e033      	b.n	8000c10 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	61fb      	str	r3, [r7, #28]
  src = data;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8000bbc:	f7ff fdad 	bl	800071a <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bcc:	d30f      	bcc.n	8000bee <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff ff8a 	bl	8000af0 <FlashSwitchBlock>
 8000bdc:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e013      	b.n	8000c10 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3304      	adds	r3, #4
 8000bec:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
    src++;
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1d6      	bne.n	8000bbc <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 8000c0e:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8000c10:	4618      	mov	r0, r3
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000c24:	f001 fb5e 	bl	80022e4 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e029      	b.n	8000c82 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000c48:	f7ff fd67 	bl	800071a <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	461c      	mov	r4, r3
 8000c52:	4615      	mov	r5, r2
 8000c54:	4622      	mov	r2, r4
 8000c56:	462b      	mov	r3, r5
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f001 faee 	bl	800223c <HAL_FLASH_Program>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	74fb      	strb	r3, [r7, #19]
      break;
 8000c6a:	e00d      	b.n	8000c88 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d002      	beq.n	8000c7c <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	74fb      	strb	r3, [r7, #19]
      break;
 8000c7a:	e005      	b.n	8000c88 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c86:	d9d2      	bls.n	8000c2e <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000c88:	f001 fb4e 	bl	8002328 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000c8c:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c98 <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	77bb      	strb	r3, [r7, #30]
 8000caa:	e052      	b.n	8000d52 <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 8000cac:	7fba      	ldrb	r2, [r7, #30]
 8000cae:	492d      	ldr	r1, [pc, #180]	@ (8000d64 <FlashEmptyCheckSector+0xcc>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3308      	adds	r3, #8
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d143      	bne.n	8000d4c <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 8000cc4:	7fba      	ldrb	r2, [r7, #30]
 8000cc6:	4927      	ldr	r1, [pc, #156]	@ (8000d64 <FlashEmptyCheckSector+0xcc>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8000cd6:	7fba      	ldrb	r2, [r7, #30]
 8000cd8:	4922      	ldr	r1, [pc, #136]	@ (8000d64 <FlashEmptyCheckSector+0xcc>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <FlashEmptyCheckSector+0x66>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <FlashEmptyCheckSector+0x70>
 8000cfe:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8000d02:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <FlashEmptyCheckSector+0xd0>)
 8000d04:	f7ff fbde 	bl	80004c4 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	e014      	b.n	8000d40 <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 8000d1e:	f7ff fcfc 	bl	800071a <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2a:	d003      	beq.n	8000d34 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 8000d30:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 8000d32:	e011      	b.n	8000d58 <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3304      	adds	r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3e5      	bcc.n	8000d16 <FlashEmptyCheckSector+0x7e>
      break;
 8000d4a:	e005      	b.n	8000d58 <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000d4c:	7fbb      	ldrb	r3, [r7, #30]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	77bb      	strb	r3, [r7, #30]
 8000d52:	7fbb      	ldrb	r3, [r7, #30]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d9a9      	bls.n	8000cac <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	080039c8 	.word	0x080039c8
 8000d68:	080039a0 	.word	0x080039a0

08000d6c <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d902      	bls.n	8000d94 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8000d94:	2203      	movs	r2, #3
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d303      	bcc.n	8000da4 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8000d9c:	2205      	movs	r2, #5
  if ((first_sector < flashLayout[0].sector_num) || \
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d902      	bls.n	8000daa <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8000daa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d133      	bne.n	8000e1a <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8000dbe:	f001 fa91 	bl	80022e4 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000dc8:	e020      	b.n	8000e0c <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 8000dca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff62 	bl	8000c98 <FlashEmptyCheckSector>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d113      	bne.n	8000e02 <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 8000dda:	f7ff fc9e 	bl	800071a <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 8000dde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000de2:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fbea 	bl	80025c8 <HAL_FLASHEx_Erase>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 8000e00:	e009      	b.n	8000e16 <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000e02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e06:	3301      	adds	r3, #1
 8000e08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e0c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d9d9      	bls.n	8000dca <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8000e16:	f001 fa87 	bl	8002328 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8000e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
} /*** end of FlashEraseSectors ***/
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000e30:	23ff      	movs	r3, #255	@ 0xff
 8000e32:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	e02f      	b.n	8000e9a <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8000e3a:	f7ff fc6e 	bl	800071a <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000e3e:	7bba      	ldrb	r2, [r7, #14]
 8000e40:	491a      	ldr	r1, [pc, #104]	@ (8000eac <FlashGetSector+0x84>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d31f      	bcc.n	8000e94 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8000e54:	7bba      	ldrb	r2, [r7, #14]
 8000e56:	4915      	ldr	r1, [pc, #84]	@ (8000eac <FlashGetSector+0x84>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8000e64:	7bba      	ldrb	r2, [r7, #14]
 8000e66:	4811      	ldr	r0, [pc, #68]	@ (8000eac <FlashGetSector+0x84>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4403      	add	r3, r0
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000e76:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d20a      	bcs.n	8000e94 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8000e7e:	7bba      	ldrb	r2, [r7, #14]
 8000e80:	490a      	ldr	r1, [pc, #40]	@ (8000eac <FlashGetSector+0x84>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8000e92:	e005      	b.n	8000ea0 <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d9cc      	bls.n	8000e3a <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	080039c8 	.word	0x080039c8

08000eb0 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep the pushbutton pressed while
   * resetting the microcontroller.
   */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000eb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <CpuUserProgramStartHook+0x20>)
 8000eba:	f001 fe2b 	bl	8002b14 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <CpuUserProgramStartHook+0x18>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e000      	b.n	8000eca <CpuUserProgramStartHook+0x1a>

  /* clean up the LED driver */
//  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
 8000ec8:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
//  LedBlinkInit(100);
} /*** end of CopInitHook ***/
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
//  LedBlinkTask();
} /*** end of CopServiceHook ***/
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f001 f820 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 f832 	bl	8000f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f806 	bl	8000f0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BootInit();
 8000f00:	f7ff fb2e 	bl	8000560 <BootInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BootTask();
 8000f04:	f7ff fb3c 	bl	8000580 <BootTask>
 8000f08:	e7fc      	b.n	8000f04 <main+0x14>
	...

08000f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <MX_USART2_UART_Init+0x50>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f30:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f34:	220c      	movs	r2, #12
 8000f36:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f46:	f001 fe31 	bl	8002bac <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000f50:	f000 f82e 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200004c4 	.word	0x200004c4
 8000f5c:	40004400 	.word	0x40004400

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_GPIO_Init+0x4c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000fc0:	f7ff fc18 	bl	80007f4 <FlashInit>
} /*** end of NvmInit ***/
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fc1f 	bl	800081c <FlashWrite>
 8000fde:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fc5b 	bl	80008b0 <FlashErase>
 8000ffa:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8001008:	f7ff fcdc 	bl	80009c4 <FlashVerifyChecksum>
 800100c:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}

08001012 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8001016:	f7ff fd3d 	bl	8000a94 <FlashGetUserProgBaseAddress>
 800101a:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8001024:	f7ff fc7a 	bl	800091c <FlashWriteChecksum>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <NvmDone+0x12>
  {
    return BLT_FALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	e002      	b.n	8001038 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8001032:	f7ff fd0b 	bl	8000a4c <FlashDone>
 8001036:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}

0800103c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	2b20      	cmp	r3, #32
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b2:	2b80      	cmp	r3, #128	@ 0x80
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	b2db      	uxtb	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
//    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//    if (HAL_UART_Init(&huart2) != HAL_OK)
//    {
//      Error_Handler();
//    }
  LL_USART_Disable(USART_CHANNEL);
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <Rs232Init+0x48>)
 8001106:	f7ff ffa9 	bl	800105c <LL_USART_Disable>
  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <Rs232Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <Rs232Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <Rs232Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <Rs232Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <Rs232Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <Rs232Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <Rs232Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8001136:	4905      	ldr	r1, [pc, #20]	@ (800114c <Rs232Init+0x4c>)
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <Rs232Init+0x48>)
 800113a:	f002 fb9d 	bl	8003878 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 800113e:	4802      	ldr	r0, [pc, #8]	@ (8001148 <Rs232Init+0x48>)
 8001140:	f7ff ff7c 	bl	800103c <LL_USART_Enable>

} /*** end of Rs232Init ***/
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	2000050c 	.word	0x2000050c

08001150 <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d903      	bls.n	800116a <Rs232TransmitPacket+0x1a>
 8001162:	2193      	movs	r1, #147	@ 0x93
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <Rs232TransmitPacket+0x54>)
 8001166:	f7ff f9ad 	bl	80004c4 <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f899 	bl	80012a4 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8001172:	2300      	movs	r3, #0
 8001174:	81fb      	strh	r3, [r7, #14]
 8001176:	e00b      	b.n	8001190 <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8001178:	f7ff facf 	bl	800071a <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f88d 	bl	80012a4 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	3301      	adds	r3, #1
 800118e:	81fb      	strh	r3, [r7, #14]
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	b29b      	uxth	r3, r3
 8001194:	89fa      	ldrh	r2, [r7, #14]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3ee      	bcc.n	8001178 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	080039b4 	.word	0x080039b4

080011a8 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <Rs232ReceivePacket+0xb4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d119      	bne.n	80011ee <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 80011ba:	4829      	ldr	r0, [pc, #164]	@ (8001260 <Rs232ReceivePacket+0xb8>)
 80011bc:	f000 f858 	bl	8001270 <Rs232ReceiveByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d145      	bne.n	8001252 <Rs232ReceivePacket+0xaa>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <Rs232ReceivePacket+0xb8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d041      	beq.n	8001252 <Rs232ReceivePacket+0xaa>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <Rs232ReceivePacket+0xb8>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d83d      	bhi.n	8001252 <Rs232ReceivePacket+0xaa>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 80011d6:	f000 fa3d 	bl	8001654 <TimerGet>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <Rs232ReceivePacket+0xbc>)
 80011de:	6013      	str	r3, [r2, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <Rs232ReceivePacket+0xb4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e031      	b.n	8001252 <Rs232ReceivePacket+0xaa>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001260 <Rs232ReceivePacket+0xb8>)
 80011f6:	4413      	add	r3, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f839 	bl	8001270 <Rs232ReceiveByte>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d11b      	bne.n	800123c <Rs232ReceivePacket+0x94>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 800120e:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <Rs232ReceivePacket+0xb8>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d11a      	bne.n	8001252 <Rs232ReceivePacket+0xaa>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4913      	ldr	r1, [pc, #76]	@ (800126c <Rs232ReceivePacket+0xc4>)
 8001220:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fab5 	bl	8000794 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <Rs232ReceivePacket+0xb4>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <Rs232ReceivePacket+0xc0>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8001238:	2301      	movs	r3, #1
 800123a:	e00b      	b.n	8001254 <Rs232ReceivePacket+0xac>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 800123c:	f000 fa0a 	bl	8001654 <TimerGet>
 8001240:	4602      	mov	r2, r0
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <Rs232ReceivePacket+0xbc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	33c8      	adds	r3, #200	@ 0xc8
 8001248:	429a      	cmp	r2, r3
 800124a:	d902      	bls.n	8001252 <Rs232ReceivePacket+0xaa>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <Rs232ReceivePacket+0xb4>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8001252:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000528 	.word	0x20000528
 8001260:	2000052c 	.word	0x2000052c
 8001264:	20000538 	.word	0x20000538
 8001268:	2000053c 	.word	0x2000053c
 800126c:	2000052d 	.word	0x2000052d

08001270 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8001278:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <Rs232ReceiveByte+0x30>)
 800127a:	f7ff feff 	bl	800107c <LL_USART_IsActiveFlag_RXNE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8001284:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <Rs232ReceiveByte+0x30>)
 8001286:	f7ff ff1f 	bl	80010c8 <LL_USART_ReceiveData8>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8001296:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004400 	.word	0x40004400

080012a4 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4619      	mov	r1, r3
 80012b2:	480e      	ldr	r0, [pc, #56]	@ (80012ec <Rs232TransmitByte+0x48>)
 80012b4:	f7ff ff15 	bl	80010e2 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 80012b8:	f000 f9cc 	bl	8001654 <TimerGet>
 80012bc:	4603      	mov	r3, r0
 80012be:	330a      	adds	r3, #10
 80012c0:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80012c2:	e007      	b.n	80012d4 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 80012c4:	f7ff fa29 	bl	800071a <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 80012c8:	f000 f9c4 	bl	8001654 <TimerGet>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d306      	bcc.n	80012e2 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80012d4:	4805      	ldr	r0, [pc, #20]	@ (80012ec <Rs232TransmitByte+0x48>)
 80012d6:	f7ff fee4 	bl	80010a2 <LL_USART_IsActiveFlag_TXE>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f1      	beq.n	80012c4 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 80012e0:	e000      	b.n	80012e4 <Rs232TransmitByte+0x40>
      break;
 80012e2:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40004400 	.word	0x40004400

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	@ (80013c4 <HAL_UART_MspInit+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12b      	bne.n	80013ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139a:	230c      	movs	r3, #12
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 80013b6:	f001 fa29 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <NMI_Handler+0x4>

080013d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <MemManage_Handler+0x4>

080013e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 fe0f 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <LL_APB2_GRP1_EnableClock+0x2c>)
 800145e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <LL_APB2_GRP1_EnableClock+0x2c>)
 800146a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023800 	.word	0x40023800

08001484 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <LL_APB2_GRP1_DisableClock+0x24>)
 800148e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	43db      	mvns	r3, r3
 8001494:	4904      	ldr	r1, [pc, #16]	@ (80014a8 <LL_APB2_GRP1_DisableClock+0x24>)
 8001496:	4013      	ands	r3, r2
 8001498:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <LL_APB2_GRP1_ForceReset+0x20>)
 80014b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b8:	4904      	ldr	r1, [pc, #16]	@ (80014cc <LL_APB2_GRP1_ForceReset+0x20>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40023800 	.word	0x40023800

080014d0 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <LL_APB2_GRP1_ReleaseReset+0x24>)
 80014da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4904      	ldr	r1, [pc, #16]	@ (80014f4 <LL_APB2_GRP1_ReleaseReset+0x24>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <LL_RCC_GetAPB2Prescaler+0x18>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <TimerInit>:
**            inline functions.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0

  /* All STM32F4 derivatives support a TIM1 peripheral. Its free running counter will be
   * used to realize the polling based millisecond time reference in this module.
   * Start by enabling the periperhal.
   */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff9a 	bl	8001454 <LL_APB2_GRP1_EnableClock>
  /* The TIM1 peripheral clock is derived from PCLK2. Obtain the PCLK2 frequency. */
  pclk2_frequency = __LL_RCC_CALC_PCLK2_FREQ(SystemCoreClock, LL_RCC_GetAPB2Prescaler());
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <TimerInit+0x84>)
 8001522:	681c      	ldr	r4, [r3, #0]
 8001524:	f7ff ffe8 	bl	80014f8 <LL_RCC_GetAPB2Prescaler>
 8001528:	4603      	mov	r3, r0
 800152a:	0b5b      	lsrs	r3, r3, #13
 800152c:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <TimerInit+0x88>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	fa24 f303 	lsr.w	r3, r4, r3
 8001534:	60fb      	str	r3, [r7, #12]
  /* According to the clock tree diagram in the RCC chapter of the reference manual,
   * the PCLK2-TIM frequency = PLCK2 * 1, when the APB2 prescaler is 1, otherwise it is
   * PCLK2 * 2.
   */
  tim_multiplier = (LL_RCC_GetAPB2Prescaler() == LL_RCC_APB2_DIV_1) ? 1U : 2U;
 8001536:	f7ff ffdf 	bl	80014f8 <LL_RCC_GetAPB2Prescaler>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <TimerInit+0x30>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <TimerInit+0x32>
 8001544:	2302      	movs	r3, #2
 8001546:	72fb      	strb	r3, [r7, #11]
  /* Obtain the PCLK2-TIM frequency. */
  pclk2_tim_frequency = pclk2_frequency * tim_multiplier;
 8001548:	7afa      	ldrb	r2, [r7, #11]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  /* Configure the free running counter as a 16-bit upwards counter that runs at the
   * desired frequency and enable it.
   */
  TIM1->CR1 = TIM_CR1_CEN;
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <TimerInit+0x8c>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  TIM1->ARR = 65535U;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <TimerInit+0x8c>)
 800155a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->PSC = (pclk2_tim_frequency / TIMER_COUNTER_FREQ_HZ) - 1U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <TimerInit+0x90>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	09db      	lsrs	r3, r3, #7
 800156c:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <TimerInit+0x8c>)
 800156e:	3b01      	subs	r3, #1
 8001570:	6293      	str	r3, [r2, #40]	@ 0x28
  /* Generate an update event to reload the prescaler immediately. */
  TIM1->EGR |= TIM_EGR_UG;
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <TimerInit+0x8c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <TimerInit+0x8c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6153      	str	r3, [r2, #20]
  /* Initialize locals. */
  millisecond_counter = 0;
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <TimerInit+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
  free_running_counter_last = (blt_int16u)TIM1->CNT;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <TimerInit+0x8c>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <TimerInit+0x98>)
 800158c:	801a      	strh	r2, [r3, #0]
} /*** end of TimerInit ***/
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000004 	.word	0x20000004
 800159c:	080039fc 	.word	0x080039fc
 80015a0:	40010000 	.word	0x40010000
 80015a4:	0a7c5ac5 	.word	0x0a7c5ac5
 80015a8:	20000540 	.word	0x20000540
 80015ac:	20000544 	.word	0x20000544

080015b0 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Bring the TIM1 peripheral back into its reset state and disable its clock. */
  LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff ff79 	bl	80014ac <LL_APB2_GRP1_ForceReset>
  LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff ff88 	bl	80014d0 <LL_APB2_GRP1_ReleaseReset>
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ff5f 	bl	8001484 <LL_APB2_GRP1_DisableClock>
  /* Set the SysTick's registers back into the default reset value. Note that this module
   * does not use the SysTick, but HAL_Init() did initialize it.
   */
  SysTick->CTRL = 0;
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <TimerReset+0x2c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <TimerReset+0x2c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80015d2:	4b02      	ldr	r3, [pc, #8]	@ (80015dc <TimerReset+0x2c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
  blt_int16u free_running_counter_now;
  blt_int16u delta_counts;
  blt_int16u ms_counts;

  /* Get the current value of the free running counter. */
  free_running_counter_now = (blt_int16u)TIM1->CNT;
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <TimerUpdate+0x64>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	80fb      	strh	r3, [r7, #6]
  /* Calculate the number of counts that passed since the detection of the last
   * millisecond event. Note that this calculation also works, in case the free running
   * counter overflowed, thanks to integer math.
   */
  delta_counts = free_running_counter_now - free_running_counter_last;
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <TimerUpdate+0x68>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	80bb      	strh	r3, [r7, #4]

  /* Did one or more milliseconds pass since the last event? */
  if (delta_counts >= TIMER_COUNTS_PER_MS)
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	2b63      	cmp	r3, #99	@ 0x63
 80015fa:	d91c      	bls.n	8001636 <TimerUpdate+0x56>
  {
    /* Calculate how many milliseconds passed. */
    ms_counts = delta_counts / TIMER_COUNTS_PER_MS;
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	4a13      	ldr	r2, [pc, #76]	@ (800164c <TimerUpdate+0x6c>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	807b      	strh	r3, [r7, #2]
    /* Update the millisecond counter. */
    millisecond_counter += ms_counts;
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <TimerUpdate+0x70>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <TimerUpdate+0x70>)
 8001612:	6013      	str	r3, [r2, #0]
    /* Store the counter value of the last millisecond event, to detect the next one. */
    free_running_counter_last += (ms_counts * TIMER_COUNTS_PER_MS);
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	461a      	mov	r2, r3
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4413      	add	r3, r2
 800161c:	461a      	mov	r2, r3
 800161e:	0091      	lsls	r1, r2, #2
 8001620:	461a      	mov	r2, r3
 8001622:	460b      	mov	r3, r1
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <TimerUpdate+0x68>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <TimerUpdate+0x68>)
 8001634:	801a      	strh	r2, [r3, #0]
  }
} /*** end of TimerUpdate ***/
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40010000 	.word	0x40010000
 8001648:	20000544 	.word	0x20000544
 800164c:	51eb851f 	.word	0x51eb851f
 8001650:	20000540 	.word	0x20000540

08001654 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8001658:	f7ff ffc2 	bl	80015e0 <TimerUpdate>

  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 800165c:	4b01      	ldr	r3, [pc, #4]	@ (8001664 <TimerGet+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000540 	.word	0x20000540

08001668 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 800166c:	f7ff fff2 	bl	8001654 <TimerGet>
 8001670:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <XcpInit+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  xcpInfo.mta = 0;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <XcpInit+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  xcpInfo.ctoPending = 0;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <XcpInit+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  xcpInfo.ctoLen = 0;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <XcpInit+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  xcpInfo.s_n_k_resource = 0;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <XcpInit+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  xcpInfo.protection = 0;
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <XcpInit+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
} /*** end of XcpInit ***/
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000548 	.word	0x20000548

080016bc <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <XcpIsConnected+0x20>)
 80016c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 80016ce:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000548 	.word	0x20000548

080016e0 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <XcpPacketTransmitted+0x18>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
} /*** end of XcpPacketTransmitted ***/
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000548 	.word	0x20000548

080016fc <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2bff      	cmp	r3, #255	@ 0xff
 800170e:	d103      	bne.n	8001718 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f979 	bl	8001a08 <XcpCmdConnect>
 8001716:	e0b7      	b.n	8001888 <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8001718:	4b6a      	ldr	r3, [pc, #424]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 800171a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800171e:	2b01      	cmp	r3, #1
 8001720:	f040 80cb 	bne.w	80018ba <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3bc9      	subs	r3, #201	@ 0xc9
 800172a:	2b35      	cmp	r3, #53	@ 0x35
 800172c:	f200 80a8 	bhi.w	8001880 <XcpPacketReceived+0x184>
 8001730:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <XcpPacketReceived+0x3c>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	08001851 	.word	0x08001851
 800173c:	08001881 	.word	0x08001881
 8001740:	08001881 	.word	0x08001881
 8001744:	08001879 	.word	0x08001879
 8001748:	08001881 	.word	0x08001881
 800174c:	08001881 	.word	0x08001881
 8001750:	08001871 	.word	0x08001871
 8001754:	08001859 	.word	0x08001859
 8001758:	08001869 	.word	0x08001869
 800175c:	08001861 	.word	0x08001861
 8001760:	08001881 	.word	0x08001881
 8001764:	08001881 	.word	0x08001881
 8001768:	08001881 	.word	0x08001881
 800176c:	08001881 	.word	0x08001881
 8001770:	08001881 	.word	0x08001881
 8001774:	08001881 	.word	0x08001881
 8001778:	08001881 	.word	0x08001881
 800177c:	08001881 	.word	0x08001881
 8001780:	08001881 	.word	0x08001881
 8001784:	08001881 	.word	0x08001881
 8001788:	08001881 	.word	0x08001881
 800178c:	08001881 	.word	0x08001881
 8001790:	08001881 	.word	0x08001881
 8001794:	08001881 	.word	0x08001881
 8001798:	08001881 	.word	0x08001881
 800179c:	08001881 	.word	0x08001881
 80017a0:	08001881 	.word	0x08001881
 80017a4:	08001881 	.word	0x08001881
 80017a8:	08001881 	.word	0x08001881
 80017ac:	08001881 	.word	0x08001881
 80017b0:	08001881 	.word	0x08001881
 80017b4:	08001881 	.word	0x08001881
 80017b8:	08001881 	.word	0x08001881
 80017bc:	08001881 	.word	0x08001881
 80017c0:	08001881 	.word	0x08001881
 80017c4:	08001881 	.word	0x08001881
 80017c8:	08001881 	.word	0x08001881
 80017cc:	08001881 	.word	0x08001881
 80017d0:	08001881 	.word	0x08001881
 80017d4:	08001881 	.word	0x08001881
 80017d8:	08001881 	.word	0x08001881
 80017dc:	08001881 	.word	0x08001881
 80017e0:	08001829 	.word	0x08001829
 80017e4:	08001819 	.word	0x08001819
 80017e8:	08001811 	.word	0x08001811
 80017ec:	08001821 	.word	0x08001821
 80017f0:	08001881 	.word	0x08001881
 80017f4:	08001881 	.word	0x08001881
 80017f8:	08001881 	.word	0x08001881
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001881 	.word	0x08001881
 8001804:	08001839 	.word	0x08001839
 8001808:	08001841 	.word	0x08001841
 800180c:	08001849 	.word	0x08001849
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f9cb 	bl	8001bac <XcpCmdUpload>
        break;
 8001816:	e037      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa03 	bl	8001c24 <XcpCmdShortUpload>
        break;
 800181e:	e033      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f9a9 	bl	8001b78 <XcpCmdSetMta>
        break;
 8001826:	e02f      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fa41 	bl	8001cb0 <XcpCmdBuildCheckSum>
        break;
 800182e:	e02b      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f979 	bl	8001b28 <XcpCmdGetId>
        break;
 8001836:	e027      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f969 	bl	8001b10 <XcpCmdSynch>
        break;
 800183e:	e023      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f941 	bl	8001ac8 <XcpCmdGetStatus>
        break;
 8001846:	e01f      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f925 	bl	8001a98 <XcpCmdDisconnect>
        break;
 800184e:	e01b      	b.n	8001888 <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fa87 	bl	8001d64 <XcpCmdProgramMax>
        break;
 8001856:	e017      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fab3 	bl	8001dc4 <XcpCmdProgram>
        break;
 800185e:	e013      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fa59 	bl	8001d18 <XcpCmdProgramStart>
        break;
 8001866:	e00f      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 faf5 	bl	8001e58 <XcpCmdProgramClear>
        break;
 800186e:	e00b      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fb17 	bl	8001ea4 <XcpCmdProgramReset>
        break;
 8001876:	e007      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fb27 	bl	8001ecc <XcpCmdProgramPrepare>
        break;
 800187e:	e003      	b.n	8001888 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001880:	2020      	movs	r0, #32
 8001882:	f000 f85f 	bl	8001944 <XcpSetCtoError>
        break;
 8001886:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 800188a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8001892:	2010      	movs	r0, #16
 8001894:	f000 f856 	bl	8001944 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 800189a:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	@ 0x86
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dd0c      	ble.n	80018bc <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 80018ac:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	@ 0x86
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <XcpPacketReceived+0x1c8>)
 80018b4:	f000 f808 	bl	80018c8 <XcpTransmitPacket>
 80018b8:	e000      	b.n	80018bc <XcpPacketReceived+0x1c0>
    return;
 80018ba:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000548 	.word	0x20000548

080018c8 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7fe fe8f 	bl	80005fc <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 80018f6:	e009      	b.n	800190c <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	4413      	add	r3, r2
 8001900:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 8001908:	f7fe ff07 	bl	800071a <CopService>
  while (length-- > 0)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1e5a      	subs	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 8001916:	7dfa      	ldrb	r2, [r7, #23]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 800191c:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <XcpProtectResources+0x18>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000548 	.word	0x20000548

08001944 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <XcpSetCtoError+0x2c>)
 8001950:	22fe      	movs	r2, #254	@ 0xfe
 8001952:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <XcpSetCtoError+0x2c>)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <XcpSetCtoError+0x2c>)
 800195c:	2202      	movs	r2, #2
 800195e:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpSetCtoError ***/
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000548 	.word	0x20000548

08001974 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)data[0];
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
#else	
  result |= (blt_int32u)data[3];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3303      	adds	r3, #3
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3302      	adds	r3, #2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
#endif
  /* Give the result back to the caller. */
  return result;
 80019b6:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  data[0] = (blt_int8u) value;
  data[1] = (blt_int8u)(value >>  8);
  data[2] = (blt_int8u)(value >> 16);
  data[3] = (blt_int8u)(value >> 24);
#else
  data[3] = (blt_int8u) value;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3303      	adds	r3, #3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >>  8);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0a1a      	lsrs	r2, r3, #8
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3302      	adds	r3, #2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >> 16);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0c1a      	lsrs	r2, r3, #16
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
  data[0] = (blt_int8u)(value >> 24);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0e1b      	lsrs	r3, r3, #24
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	701a      	strb	r2, [r3, #0]
#endif
} /*** end of XcpSetOrderedLong ***/
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 8001a10:	f7ff ff8a 	bl	8001928 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a34:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a3e:	789b      	ldrb	r3, [r3, #2]
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a48:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001a4a:	f7fe fdef 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a54:	70da      	strb	r2, [r3, #3]
  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
#else
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8001a56:	f7fe fe19 	bl	800068c <ComGetActiveInterfaceMaxTxLen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a64:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8001a66:	f7fe fe11 	bl	800068c <ComGetActiveInterfaceMaxTxLen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a70:	715a      	strb	r2, [r3, #5]
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <XcpCmdConnect+0x8c>)
 8001a80:	2208      	movs	r2, #8
 8001a82:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 8001a86:	f7ff fa99 	bl	8000fbc <NvmInit>
} /*** end of XcpCmdConnect ***/
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000548 	.word	0x20000548

08001a98 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <XcpCmdDisconnect+0x2c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* enable resource protection */
  XcpProtectResources();
 8001aa8:	f7ff ff3e 	bl	8001928 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <XcpCmdDisconnect+0x2c>)
 8001aae:	22ff      	movs	r2, #255	@ 0xff
 8001ab0:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <XcpCmdDisconnect+0x2c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdDisconnect ***/
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000548 	.word	0x20000548

08001ac8 <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001ad2:	22ff      	movs	r2, #255	@ 0xff
 8001ad4:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001ade:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001ae4:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <XcpCmdGetStatus+0x44>)
 8001afa:	2206      	movs	r2, #6
 8001afc:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdGetStatus ***/
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000548 	.word	0x20000548

08001b10 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff ff13 	bl	8001944 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b32:	22ff      	movs	r2, #255	@ 0xff
 8001b34:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <XcpCmdGetId+0x48>)
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8001b50:	2307      	movs	r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <XcpCmdGetId+0x4c>)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ff34 	bl	80019c4 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <XcpCmdGetId+0x44>)
 8001b5e:	2208      	movs	r2, #8
 8001b60:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdGetId ***/
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000548 	.word	0x20000548
 8001b70:	08003a04 	.word	0x08003a04
 8001b74:	2000054c 	.word	0x2000054c

08001b78 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <XcpCmdSetMta+0x30>)
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fef2 	bl	8001974 <XcpGetOrderedLong>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <XcpCmdSetMta+0x30>)
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <XcpCmdSetMta+0x30>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdSetMta ***/
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000548 	.word	0x20000548

08001bac <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001bb4:	f7fe fd3a 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d803      	bhi.n	8001bce <XcpCmdUpload+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001bc6:	2022      	movs	r0, #34	@ 0x22
 8001bc8:	f7ff febc 	bl	8001944 <XcpSetCtoError>
    return;
 8001bcc:	e023      	b.n	8001c16 <XcpCmdUpload+0x6a>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <XcpCmdUpload+0x70>)
 8001bd8:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <XcpCmdUpload+0x74>)
 8001bde:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8001be2:	89fa      	ldrh	r2, [r7, #14]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fdd5 	bl	8000794 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <XcpCmdUpload+0x74>)
 8001bec:	22ff      	movs	r2, #255	@ 0xff
 8001bee:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <XcpCmdUpload+0x74>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <XcpCmdUpload+0x74>)
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <XcpCmdUpload+0x74>)
 8001c12:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdUpload ***/
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000549 	.word	0x20000549
 8001c20:	20000548 	.word	0x20000548

08001c24 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001c2c:	f7fe fcfe 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3301      	adds	r3, #1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d803      	bhi.n	8001c46 <XcpCmdShortUpload+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001c3e:	2022      	movs	r0, #34	@ 0x22
 8001c40:	f7ff fe80 	bl	8001944 <XcpSetCtoError>
    return;
 8001c44:	e02c      	b.n	8001ca0 <XcpCmdShortUpload+0x7c>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe92 	bl	8001974 <XcpGetOrderedLong>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <XcpCmdShortUpload+0x88>)
 8001c62:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4a10      	ldr	r2, [pc, #64]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c68:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8001c6c:	89fa      	ldrh	r2, [r7, #14]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd90 	bl	8000794 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c76:	22ff      	movs	r2, #255	@ 0xff
 8001c78:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	3201      	adds	r2, #1
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c8a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3301      	adds	r3, #1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <XcpCmdShortUpload+0x84>)
 8001c9c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdShortUpload ***/
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000548 	.word	0x20000548
 8001cac:	20000549 	.word	0x20000549

08001cb0 <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe54 	bl	8001974 <XcpGetOrderedLong>
 8001ccc:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd4:	f107 020c 	add.w	r2, r7, #12
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fe03 	bl	80018e6 <XcpComputeChecksum>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001ce6:	7cfb      	ldrb	r3, [r7, #19]
 8001ce8:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4909      	ldr	r1, [pc, #36]	@ (8001d14 <XcpCmdBuildCheckSum+0x64>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe68 	bl	80019c4 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <XcpCmdBuildCheckSum+0x60>)
 8001d02:	2208      	movs	r2, #8
 8001d04:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000548 	.word	0x20000548
 8001d14:	2000054c 	.word	0x2000054c

08001d18 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d22:	22ff      	movs	r2, #255	@ 0xff
 8001d24:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001d32:	f7fe fc7b 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d3c:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <XcpCmdProgramStart+0x48>)
 8001d52:	2207      	movs	r2, #7
 8001d54:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramStart ***/
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000548 	.word	0x20000548

08001d64 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <XcpCmdProgramMax+0x5c>)
 8001d6e:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 8001d72:	f7fe fc5b 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	461a      	mov	r2, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff f920 	bl	8000fc8 <NvmWrite>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001d8e:	2031      	movs	r0, #49	@ 0x31
 8001d90:	f7ff fdd8 	bl	8001944 <XcpSetCtoError>
    return;
 8001d94:	e011      	b.n	8001dba <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <XcpCmdProgramMax+0x5c>)
 8001d98:	22ff      	movs	r2, #255	@ 0xff
 8001d9a:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001d9c:	f7fe fc46 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <XcpCmdProgramMax+0x5c>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <XcpCmdProgramMax+0x5c>)
 8001dae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001db2:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <XcpCmdProgramMax+0x5c>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramMax ***/
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	20000548 	.word	0x20000548

08001dc4 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001dcc:	f7fe fc2e 	bl	800062c <ComGetActiveInterfaceMaxRxLen>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	3201      	adds	r2, #1
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	dc03      	bgt.n	8001de6 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001dde:	2022      	movs	r0, #34	@ 0x22
 8001de0:	f7ff fdb0 	bl	8001944 <XcpSetCtoError>
    return;
 8001de4:	e033      	b.n	8001e4e <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <XcpCmdProgram+0x90>)
 8001de8:	22ff      	movs	r2, #255	@ 0xff
 8001dea:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <XcpCmdProgram+0x90>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 8001dfe:	f7ff f90f 	bl	8001020 <NvmDone>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d121      	bne.n	8001e4c <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 8001e08:	2031      	movs	r0, #49	@ 0x31
 8001e0a:	f7ff fd9b 	bl	8001944 <XcpSetCtoError>
    }
    return;
 8001e0e:	e01d      	b.n	8001e4c <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <XcpCmdProgram+0x90>)
 8001e12:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	f7ff f8d0 	bl	8000fc8 <NvmWrite>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001e2e:	2031      	movs	r0, #49	@ 0x31
 8001e30:	f7ff fd88 	bl	8001944 <XcpSetCtoError>
    return;
 8001e34:	e00b      	b.n	8001e4e <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <XcpCmdProgram+0x90>)
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	3201      	adds	r2, #1
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a03      	ldr	r2, [pc, #12]	@ (8001e54 <XcpCmdProgram+0x90>)
 8001e46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e4a:	e000      	b.n	8001e4e <XcpCmdProgram+0x8a>
    return;
 8001e4c:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000548 	.word	0x20000548

08001e58 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <XcpCmdProgramClear+0x48>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e66:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd81 	bl	8001974 <XcpGetOrderedLong>
 8001e72:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7ff f8b6 	bl	8000fe8 <NvmErase>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001e82:	2031      	movs	r0, #49	@ 0x31
 8001e84:	f7ff fd5e 	bl	8001944 <XcpSetCtoError>
    return;
 8001e88:	e006      	b.n	8001e98 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <XcpCmdProgramClear+0x48>)
 8001e8c:	22ff      	movs	r2, #255	@ 0xff
 8001e8e:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <XcpCmdProgramClear+0x48>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramClear ***/
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000548 	.word	0x20000548

08001ea4 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8001eac:	f7fe fc42 	bl	8000734 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <XcpCmdProgramReset+0x24>)
 8001eb2:	22ff      	movs	r2, #255	@ 0xff
 8001eb4:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001eb6:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <XcpCmdProgramReset+0x24>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramReset ***/
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000548 	.word	0x20000548

08001ecc <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001ed4:	2031      	movs	r0, #49	@ 0x31
 8001ed6:	f7ff fd35 	bl	8001944 <XcpSetCtoError>
  return;
 8001eda:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ee8:	f7ff faa2 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f001 fd15 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe ffeb 	bl	8000ef0 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f28:	08003a1c 	.word	0x08003a1c
  ldr r2, =_sbss
 8001f2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f30:	200005f8 	.word	0x200005f8

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f937 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f83e 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff f9c0 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_DeInit+0x50>)
 8001f84:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_DeInit+0x54>)
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_DeInit+0x58>)
 8001f9c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_DeInit+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fbe:	f000 f80b 	bl	8001fd8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	10e2c80f 	.word	0x10e2c80f
 8001fd0:	00077931 	.word	0x00077931
 8001fd4:	0060109f 	.word	0x0060109f

08001fd8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f90b 	bl	8002222 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 f8e1 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000004 	.word	0x20000004
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c
 800206c:	200005d4 	.word	0x200005d4

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	@ (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff47 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff5c 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffb0 	bl	8002190 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <HAL_FLASH_Program+0xa0>)
 8002250:	7e1b      	ldrb	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_FLASH_Program+0x1e>
 8002256:	2302      	movs	r3, #2
 8002258:	e03b      	b.n	80022d2 <HAL_FLASH_Program+0x96>
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <HAL_FLASH_Program+0xa0>)
 800225c:	2201      	movs	r2, #1
 800225e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002260:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002264:	f000 f870 	bl	8002348 <FLASH_WaitForLastOperation>
 8002268:	4603      	mov	r3, r0
 800226a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12b      	bne.n	80022ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002278:	783b      	ldrb	r3, [r7, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	68b8      	ldr	r0, [r7, #8]
 800227e:	f000 f91b 	bl	80024b8 <FLASH_Program_Byte>
 8002282:	e016      	b.n	80022b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800228a:	883b      	ldrh	r3, [r7, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	f000 f8ee 	bl	8002470 <FLASH_Program_HalfWord>
 8002294:	e00d      	b.n	80022b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d105      	bne.n	80022a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f000 f8c3 	bl	800242c <FLASH_Program_Word>
 80022a6:	e004      	b.n	80022b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80022a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f000 f88b 	bl	80023c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b6:	f000 f847 	bl	8002348 <FLASH_WaitForLastOperation>
 80022ba:	4603      	mov	r3, r0
 80022bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <HAL_FLASH_Program+0xa4>)
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	4a07      	ldr	r2, [pc, #28]	@ (80022e0 <HAL_FLASH_Program+0xa4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <HAL_FLASH_Program+0xa0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200005d8 	.word	0x200005d8
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_FLASH_Unlock+0x38>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da0b      	bge.n	800230e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_FLASH_Unlock+0x38>)
 80022f8:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_FLASH_Unlock+0x3c>)
 80022fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_FLASH_Unlock+0x38>)
 80022fe:	4a09      	ldr	r2, [pc, #36]	@ (8002324 <HAL_FLASH_Unlock+0x40>)
 8002300:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_FLASH_Unlock+0x38>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da01      	bge.n	800230e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800230e:	79fb      	ldrb	r3, [r7, #7]
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40023c00 	.word	0x40023c00
 8002320:	45670123 	.word	0x45670123
 8002324:	cdef89ab 	.word	0xcdef89ab

08002328 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_FLASH_Lock+0x1c>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_FLASH_Lock+0x1c>)
 8002332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002336:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40023c00 	.word	0x40023c00

08002348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002354:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <FLASH_WaitForLastOperation+0x78>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800235a:	f7ff f985 	bl	8001668 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002360:	e010      	b.n	8002384 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d00c      	beq.n	8002384 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <FLASH_WaitForLastOperation+0x38>
 8002370:	f7ff f97a 	bl	8001668 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d201      	bcs.n	8002384 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e019      	b.n	80023b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <FLASH_WaitForLastOperation+0x7c>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e8      	bne.n	8002362 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <FLASH_WaitForLastOperation+0x7c>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <FLASH_WaitForLastOperation+0x7c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <FLASH_WaitForLastOperation+0x7c>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023ae:	f000 f8a5 	bl	80024fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
  
}  
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200005d8 	.word	0x200005d8
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80023ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <FLASH_Program_DoubleWord+0x60>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80023fe:	f3bf 8f6f 	isb	sy
}
 8002402:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	000a      	movs	r2, r1
 8002412:	2300      	movs	r3, #0
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	3104      	adds	r1, #4
 8002418:	4613      	mov	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40023c00 	.word	0x40023c00

0800242c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <FLASH_Program_Word+0x40>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <FLASH_Program_Word+0x40>)
 800243c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002440:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <FLASH_Program_Word+0x40>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <FLASH_Program_Word+0x40>)
 8002448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <FLASH_Program_Word+0x40>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4a06      	ldr	r2, [pc, #24]	@ (800246c <FLASH_Program_Word+0x40>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023c00 	.word	0x40023c00

08002470 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 8002482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <FLASH_Program_HalfWord+0x44>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	801a      	strh	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00

080024b8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024d8:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <FLASH_Program_Byte+0x40>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00

080024fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002500:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f043 0310 	orr.w	r3, r3, #16
 8002514:	4a2b      	ldr	r2, [pc, #172]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002516:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 800251a:	2210      	movs	r2, #16
 800251c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002534:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002538:	2220      	movs	r2, #32
 800253a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002548:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002554:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002570:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002574:	2280      	movs	r2, #128	@ 0x80
 8002576:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002584:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 800258e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 8002592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002596:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f043 0320 	orr.w	r3, r3, #32
 80025ac:	4a05      	ldr	r2, [pc, #20]	@ (80025c4 <FLASH_SetErrorCode+0xc8>)
 80025ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <FLASH_SetErrorCode+0xc4>)
 80025b2:	2202      	movs	r2, #2
 80025b4:	60da      	str	r2, [r3, #12]
  }
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	200005d8 	.word	0x200005d8

080025c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025da:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <HAL_FLASHEx_Erase+0xd8>)
 80025dc:	7e1b      	ldrb	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_FLASHEx_Erase+0x1e>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e058      	b.n	8002698 <HAL_FLASHEx_Erase+0xd0>
 80025e6:	4b2e      	ldr	r3, [pc, #184]	@ (80026a0 <HAL_FLASHEx_Erase+0xd8>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025f0:	f7ff feaa 	bl	8002348 <FLASH_WaitForLastOperation>
 80025f4:	4603      	mov	r3, r0
 80025f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d148      	bne.n	8002690 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d115      	bne.n	800263a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 f844 	bl	80026a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002620:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002624:	f7ff fe90 	bl	8002348 <FLASH_WaitForLastOperation>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <HAL_FLASHEx_Erase+0xdc>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <HAL_FLASHEx_Erase+0xdc>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6113      	str	r3, [r2, #16]
 8002638:	e028      	b.n	800268c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	e01c      	b.n	800267c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	68b8      	ldr	r0, [r7, #8]
 800264c:	f000 f850 	bl	80026f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002650:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002654:	f7ff fe78 	bl	8002348 <FLASH_WaitForLastOperation>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_FLASHEx_Erase+0xdc>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a10      	ldr	r2, [pc, #64]	@ (80026a4 <HAL_FLASHEx_Erase+0xdc>)
 8002662:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002666:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	601a      	str	r2, [r3, #0]
          break;
 8002674:	e00a      	b.n	800268c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4413      	add	r3, r2
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3da      	bcc.n	8002642 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800268c:	f000 f878 	bl	8002780 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <HAL_FLASHEx_Erase+0xd8>)
 8002692:	2200      	movs	r2, #0
 8002694:	761a      	strb	r2, [r3, #24]

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200005d8 	.word	0x200005d8
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026b4:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <FLASH_MassErase+0x44>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <FLASH_MassErase+0x44>)
 80026ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <FLASH_MassErase+0x44>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <FLASH_MassErase+0x44>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <FLASH_MassErase+0x44>)
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <FLASH_MassErase+0x44>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6113      	str	r3, [r2, #16]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00

080026f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e010      	b.n	800272e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d103      	bne.n	800271a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e009      	b.n	800272e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d103      	bne.n	8002728 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e002      	b.n	800272e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800272c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4a12      	ldr	r2, [pc, #72]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	490f      	ldr	r1, [pc, #60]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 800274c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002750:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4313      	orrs	r3, r2
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <FLASH_Erase_Sector+0x8c>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276e:	6113      	str	r3, [r2, #16]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40023c00 	.word	0x40023c00

08002780 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002784:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <FLASH_FlushCaches+0x88>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <FLASH_FlushCaches+0x88>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <FLASH_FlushCaches+0x88>)
 8002796:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800279a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <FLASH_FlushCaches+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a16      	ldr	r2, [pc, #88]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <FLASH_FlushCaches+0x88>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
  }
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e159      	b.n	8002adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	f040 8148 	bne.w	8002ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d005      	beq.n	800285e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	2b02      	cmp	r3, #2
 800285c:	d130      	bne.n	80028c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 0201 	and.w	r2, r3, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d017      	beq.n	80028fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d123      	bne.n	8002950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80a2 	beq.w	8002ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b57      	ldr	r3, [pc, #348]	@ (8002af4 <HAL_GPIO_Init+0x2e8>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_GPIO_Init+0x2e8>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b54      	ldr	r3, [pc, #336]	@ (8002af4 <HAL_GPIO_Init+0x2e8>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ae:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_GPIO_Init+0x2ec>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a49      	ldr	r2, [pc, #292]	@ (8002afc <HAL_GPIO_Init+0x2f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x202>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a48      	ldr	r2, [pc, #288]	@ (8002b00 <HAL_GPIO_Init+0x2f4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x1fe>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a47      	ldr	r2, [pc, #284]	@ (8002b04 <HAL_GPIO_Init+0x2f8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x1fa>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a46      	ldr	r2, [pc, #280]	@ (8002b08 <HAL_GPIO_Init+0x2fc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x1f6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a45      	ldr	r2, [pc, #276]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x1f2>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x204>
 80029fe:	2307      	movs	r3, #7
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x204>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x204>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x204>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x204>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	@ (8002af8 <HAL_GPIO_Init+0x2ec>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b38      	ldr	r3, [pc, #224]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a2f      	ldr	r2, [pc, #188]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b2d      	ldr	r3, [pc, #180]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a24      	ldr	r2, [pc, #144]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f aea2 	bls.w	8002828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40013c00 	.word	0x40013c00

08002b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e001      	b.n	8002b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080039fc 	.word	0x080039fc

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffdc 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	080039fc 	.word	0x080039fc

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fbb4 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	@ 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f82b 	bl	8002c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b0c0      	sub	sp, #256	@ 0x100
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	68d9      	ldr	r1, [r3, #12]
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	ea40 0301 	orr.w	r3, r0, r1
 8002c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ca4:	f021 010c 	bic.w	r1, r1, #12
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	6999      	ldr	r1, [r3, #24]
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	ea40 0301 	orr.w	r3, r0, r1
 8002cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b8f      	ldr	r3, [pc, #572]	@ (8002f18 <UART_SetConfig+0x2cc>)
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <UART_SetConfig+0xa0>
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <UART_SetConfig+0x2d0>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d104      	bne.n	8002cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7ff ff4a 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cf4:	e003      	b.n	8002cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7ff ff31 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8002cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d08:	f040 810c 	bne.w	8002f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d26:	415b      	adcs	r3, r3
 8002d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d2e:	4621      	mov	r1, r4
 8002d30:	eb12 0801 	adds.w	r8, r2, r1
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb43 0901 	adc.w	r9, r3, r1
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	eb18 0303 	adds.w	r3, r8, r3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	eb49 0303 	adc.w	r3, r9, r3
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	18db      	adds	r3, r3, r3
 8002d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d80:	4613      	mov	r3, r2
 8002d82:	eb42 0303 	adc.w	r3, r2, r3
 8002d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d90:	f7fd fa20 	bl	80001d4 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dca:	4649      	mov	r1, r9
 8002dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de4:	4692      	mov	sl, r2
 8002de6:	469b      	mov	fp, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	eb1a 0303 	adds.w	r3, sl, r3
 8002dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb4b 0303 	adc.w	r3, fp, r3
 8002df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e26:	f7fd f9d5 	bl	80001d4 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	@ 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e46:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e54:	441c      	add	r4, r3
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e70:	415b      	adcs	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e78:	4641      	mov	r1, r8
 8002e7a:	1851      	adds	r1, r2, r1
 8002e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e7e:	4649      	mov	r1, r9
 8002e80:	414b      	adcs	r3, r1
 8002e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e90:	4659      	mov	r1, fp
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eac:	464b      	mov	r3, r9
 8002eae:	460a      	mov	r2, r1
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ee2:	f7fd f977 	bl	80001d4 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	@ 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	@ 0x32
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	f003 0207 	and.w	r2, r3, #7
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4422      	add	r2, r4
 8002f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f14:	e106      	b.n	8003124 <UART_SetConfig+0x4d8>
 8002f16:	bf00      	nop
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	6239      	str	r1, [r7, #32]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1854      	adds	r4, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb43 0501 	adc.w	r5, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	00eb      	lsls	r3, r5, #3
 8002f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5e:	00e2      	lsls	r2, r4, #3
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	18e3      	adds	r3, r4, r3
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	eb45 0303 	adc.w	r3, r5, r3
 8002f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f92:	4629      	mov	r1, r5
 8002f94:	008b      	lsls	r3, r1, #2
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	008a      	lsls	r2, r1, #2
 8002fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fa4:	f7fd f916 	bl	80001d4 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b60      	ldr	r3, [pc, #384]	@ (8003130 <UART_SetConfig+0x4e4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	61b9      	str	r1, [r7, #24]
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6139      	str	r1, [r7, #16]
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003030:	4649      	mov	r1, r9
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	4641      	mov	r1, r8
 8003036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303a:	4641      	mov	r1, r8
 800303c:	008a      	lsls	r2, r1, #2
 800303e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003042:	f7fd f8c7 	bl	80001d4 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2301 	umull	r2, r3, r3, r1
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2264      	movs	r2, #100	@ 0x64
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	@ 0x32
 8003060:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <UART_SetConfig+0x4e4>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	673b      	str	r3, [r7, #112]	@ 0x70
 8003076:	677a      	str	r2, [r7, #116]	@ 0x74
 8003078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	415b      	adcs	r3, r3
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030be:	464b      	mov	r3, r9
 80030c0:	460a      	mov	r2, r1
 80030c2:	eb42 0303 	adc.w	r3, r2, r3
 80030c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030f2:	f7fd f86f 	bl	80001d4 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	@ 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	@ 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <LL_RCC_GetSysClkSource>:
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <LL_RCC_GetSysClkSource+0x18>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <LL_RCC_GetAHBPrescaler>:
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <LL_RCC_GetAHBPrescaler+0x18>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <LL_RCC_GetAPB1Prescaler>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <LL_RCC_GetAPB2Prescaler>:
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031a8:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <LL_RCC_PLL_GetMainSource+0x18>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <LL_RCC_PLL_GetN+0x18>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40023800 	.word	0x40023800

080031dc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80031e0:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <LL_RCC_PLL_GetP+0x18>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <LL_RCC_PLL_GetDivider+0x18>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800321c:	f000 f820 	bl	8003260 <RCC_GetSystemClockFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f840 	bl	80032b0 <RCC_GetHCLKClockFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f84e 	bl	80032dc <RCC_GetPCLK1ClockFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f85a 	bl	8003304 <RCC_GetPCLK2ClockFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60da      	str	r2, [r3, #12]
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800326a:	f7ff ff63 	bl	8003134 <LL_RCC_GetSysClkSource>
 800326e:	4603      	mov	r3, r0
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00c      	beq.n	800328e <RCC_GetSystemClockFreq+0x2e>
 8003274:	2b08      	cmp	r3, #8
 8003276:	d80f      	bhi.n	8003298 <RCC_GetSystemClockFreq+0x38>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <RCC_GetSystemClockFreq+0x22>
 800327c:	2b04      	cmp	r3, #4
 800327e:	d003      	beq.n	8003288 <RCC_GetSystemClockFreq+0x28>
 8003280:	e00a      	b.n	8003298 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <RCC_GetSystemClockFreq+0x48>)
 8003284:	607b      	str	r3, [r7, #4]
      break;
 8003286:	e00a      	b.n	800329e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003288:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <RCC_GetSystemClockFreq+0x4c>)
 800328a:	607b      	str	r3, [r7, #4]
      break;
 800328c:	e007      	b.n	800329e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800328e:	2008      	movs	r0, #8
 8003290:	f000 f84c 	bl	800332c <RCC_PLL_GetFreqDomain_SYS>
 8003294:	6078      	str	r0, [r7, #4]
      break;
 8003296:	e002      	b.n	800329e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <RCC_GetSystemClockFreq+0x48>)
 800329a:	607b      	str	r3, [r7, #4]
      break;
 800329c:	bf00      	nop
  }

  return frequency;
 800329e:	687b      	ldr	r3, [r7, #4]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	017d7840 	.word	0x017d7840

080032b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80032b8:	f7ff ff4a 	bl	8003150 <LL_RCC_GetAHBPrescaler>
 80032bc:	4603      	mov	r3, r0
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <RCC_GetHCLKClockFreq+0x28>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	40d3      	lsrs	r3, r2
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	080039ec 	.word	0x080039ec

080032dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80032e4:	f7ff ff42 	bl	800316c <LL_RCC_GetAPB1Prescaler>
 80032e8:	4603      	mov	r3, r0
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <RCC_GetPCLK1ClockFreq+0x24>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	40d3      	lsrs	r3, r2
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	080039fc 	.word	0x080039fc

08003304 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800330c:	f7ff ff3c 	bl	8003188 <LL_RCC_GetAPB2Prescaler>
 8003310:	4603      	mov	r3, r0
 8003312:	0b5b      	lsrs	r3, r3, #13
 8003314:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <RCC_GetPCLK2ClockFreq+0x24>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	461a      	mov	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	40d3      	lsrs	r3, r2
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	080039fc 	.word	0x080039fc

0800332c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003340:	f7ff ff30 	bl	80031a4 <LL_RCC_PLL_GetMainSource>
 8003344:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003352:	d003      	beq.n	800335c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003354:	e005      	b.n	8003362 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003358:	617b      	str	r3, [r7, #20]
      break;
 800335a:	e005      	b.n	8003368 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800335e:	617b      	str	r3, [r7, #20]
      break;
 8003360:	e002      	b.n	8003368 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003364:	617b      	str	r3, [r7, #20]
      break;
 8003366:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d113      	bne.n	8003396 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800336e:	f7ff ff43 	bl	80031f8 <LL_RCC_PLL_GetDivider>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fbb3 f4f2 	udiv	r4, r3, r2
 800337a:	f7ff ff21 	bl	80031c0 <LL_RCC_PLL_GetN>
 800337e:	4603      	mov	r3, r0
 8003380:	fb03 f404 	mul.w	r4, r3, r4
 8003384:	f7ff ff2a 	bl	80031dc <LL_RCC_PLL_GetP>
 8003388:	4603      	mov	r3, r0
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	3301      	adds	r3, #1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fbb4 f3f3 	udiv	r3, r4, r3
 8003394:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003396:	693b      	ldr	r3, [r7, #16]
}
 8003398:	4618      	mov	r0, r3
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	017d7840 	.word	0x017d7840

080033a8 <LL_USART_IsEnabled>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_USART_SetStopBitsLength>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_USART_SetHWFlowCtrl>:
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	615a      	str	r2, [r3, #20]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_USART_SetBaudRate>:
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c0      	sub	sp, #256	@ 0x100
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003428:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800342c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003430:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343c:	f040 810c 	bne.w	8003658 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800344a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800344e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	1891      	adds	r1, r2, r2
 8003458:	6639      	str	r1, [r7, #96]	@ 0x60
 800345a:	415b      	adcs	r3, r3
 800345c:	667b      	str	r3, [r7, #100]	@ 0x64
 800345e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003462:	4621      	mov	r1, r4
 8003464:	eb12 0801 	adds.w	r8, r2, r1
 8003468:	4629      	mov	r1, r5
 800346a:	eb43 0901 	adc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003490:	462b      	mov	r3, r5
 8003492:	eb49 0303 	adc.w	r3, r9, r3
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800349a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800349e:	2200      	movs	r2, #0
 80034a0:	469a      	mov	sl, r3
 80034a2:	4693      	mov	fp, r2
 80034a4:	eb1a 030a 	adds.w	r3, sl, sl
 80034a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034aa:	eb4b 030b 	adc.w	r3, fp, fp
 80034ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b8:	f7fc fe8c 	bl	80001d4 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b64      	ldr	r3, [pc, #400]	@ (8003654 <LL_USART_SetBaudRate+0x238>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	b29c      	uxth	r4, r3
 80034ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034d8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034dc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	6539      	str	r1, [r7, #80]	@ 0x50
 80034e8:	415b      	adcs	r3, r3
 80034ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003530:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003534:	2200      	movs	r2, #0
 8003536:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800353a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800353e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003542:	460b      	mov	r3, r1
 8003544:	18db      	adds	r3, r3, r3
 8003546:	643b      	str	r3, [r7, #64]	@ 0x40
 8003548:	4613      	mov	r3, r2
 800354a:	eb42 0303 	adc.w	r3, r2, r3
 800354e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003554:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003558:	f7fc fe3c 	bl	80001d4 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4611      	mov	r1, r2
 8003562:	4b3c      	ldr	r3, [pc, #240]	@ (8003654 <LL_USART_SetBaudRate+0x238>)
 8003564:	fba3 2301 	umull	r2, r3, r3, r1
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2264      	movs	r2, #100	@ 0x64
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	1acb      	subs	r3, r1, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003578:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <LL_USART_SetBaudRate+0x238>)
 800357a:	fba3 2302 	umull	r2, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	b29b      	uxth	r3, r3
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800358a:	b29b      	uxth	r3, r3
 800358c:	4423      	add	r3, r4
 800358e:	b29c      	uxth	r4, r3
 8003590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800359a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800359e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80035a2:	4642      	mov	r2, r8
 80035a4:	464b      	mov	r3, r9
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035aa:	415b      	adcs	r3, r3
 80035ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035b2:	4641      	mov	r1, r8
 80035b4:	1851      	adds	r1, r2, r1
 80035b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80035b8:	4649      	mov	r1, r9
 80035ba:	414b      	adcs	r3, r1
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035ca:	4659      	mov	r1, fp
 80035cc:	00cb      	lsls	r3, r1, #3
 80035ce:	4651      	mov	r1, sl
 80035d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d4:	4651      	mov	r1, sl
 80035d6:	00ca      	lsls	r2, r1, #3
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	4603      	mov	r3, r0
 80035de:	4642      	mov	r2, r8
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e6:	464b      	mov	r3, r9
 80035e8:	460a      	mov	r2, r1
 80035ea:	eb42 0303 	adc.w	r3, r2, r3
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035fc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003600:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003604:	460b      	mov	r3, r1
 8003606:	18db      	adds	r3, r3, r3
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800360a:	4613      	mov	r3, r2
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003616:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800361a:	f7fc fddb 	bl	80001d4 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <LL_USART_SetBaudRate+0x238>)
 8003624:	fba3 1302 	umull	r1, r3, r3, r2
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	2164      	movs	r1, #100	@ 0x64
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	3332      	adds	r3, #50	@ 0x32
 8003636:	4a07      	ldr	r2, [pc, #28]	@ (8003654 <LL_USART_SetBaudRate+0x238>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	b29b      	uxth	r3, r3
 8003646:	4423      	add	r3, r4
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	e108      	b.n	8003866 <LL_USART_SetBaudRate+0x44a>
 8003654:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800365c:	2200      	movs	r2, #0
 800365e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003662:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003666:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800366a:	4642      	mov	r2, r8
 800366c:	464b      	mov	r3, r9
 800366e:	1891      	adds	r1, r2, r2
 8003670:	6239      	str	r1, [r7, #32]
 8003672:	415b      	adcs	r3, r3
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
 8003676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800367a:	4641      	mov	r1, r8
 800367c:	1854      	adds	r4, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb43 0501 	adc.w	r5, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	00eb      	lsls	r3, r5, #3
 800368e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003692:	00e2      	lsls	r2, r4, #3
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	4643      	mov	r3, r8
 800369a:	18e3      	adds	r3, r4, r3
 800369c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036a0:	464b      	mov	r3, r9
 80036a2:	eb45 0303 	adc.w	r3, r5, r3
 80036a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80036aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80036c4:	4629      	mov	r1, r5
 80036c6:	008b      	lsls	r3, r1, #2
 80036c8:	4621      	mov	r1, r4
 80036ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ce:	4621      	mov	r1, r4
 80036d0:	008a      	lsls	r2, r1, #2
 80036d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80036d6:	f7fc fd7d 	bl	80001d4 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4b65      	ldr	r3, [pc, #404]	@ (8003874 <LL_USART_SetBaudRate+0x458>)
 80036e0:	fba3 2302 	umull	r2, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	b29c      	uxth	r4, r3
 80036ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036fa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80036fe:	4642      	mov	r2, r8
 8003700:	464b      	mov	r3, r9
 8003702:	1891      	adds	r1, r2, r2
 8003704:	61b9      	str	r1, [r7, #24]
 8003706:	415b      	adcs	r3, r3
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370e:	4641      	mov	r1, r8
 8003710:	1851      	adds	r1, r2, r1
 8003712:	6139      	str	r1, [r7, #16]
 8003714:	4649      	mov	r1, r9
 8003716:	414b      	adcs	r3, r1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003726:	4659      	mov	r1, fp
 8003728:	00cb      	lsls	r3, r1, #3
 800372a:	4651      	mov	r1, sl
 800372c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003730:	4651      	mov	r1, sl
 8003732:	00ca      	lsls	r2, r1, #3
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	4603      	mov	r3, r0
 800373a:	4642      	mov	r2, r8
 800373c:	189b      	adds	r3, r3, r2
 800373e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003742:	464b      	mov	r3, r9
 8003744:	460a      	mov	r2, r1
 8003746:	eb42 0303 	adc.w	r3, r2, r3
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800374e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003758:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003768:	4649      	mov	r1, r9
 800376a:	008b      	lsls	r3, r1, #2
 800376c:	4641      	mov	r1, r8
 800376e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003772:	4641      	mov	r1, r8
 8003774:	008a      	lsls	r2, r1, #2
 8003776:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800377a:	f7fc fd2b 	bl	80001d4 <__aeabi_uldivmod>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4611      	mov	r1, r2
 8003784:	4b3b      	ldr	r3, [pc, #236]	@ (8003874 <LL_USART_SetBaudRate+0x458>)
 8003786:	fba3 2301 	umull	r2, r3, r3, r1
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2264      	movs	r2, #100	@ 0x64
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	1acb      	subs	r3, r1, r3
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	3332      	adds	r3, #50	@ 0x32
 8003798:	4a36      	ldr	r2, [pc, #216]	@ (8003874 <LL_USART_SetBaudRate+0x458>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4423      	add	r3, r4
 80037aa:	b29c      	uxth	r4, r3
 80037ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037b0:	2200      	movs	r2, #0
 80037b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037b4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037b6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037ba:	4642      	mov	r2, r8
 80037bc:	464b      	mov	r3, r9
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	415b      	adcs	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ca:	4641      	mov	r1, r8
 80037cc:	1851      	adds	r1, r2, r1
 80037ce:	6039      	str	r1, [r7, #0]
 80037d0:	4649      	mov	r1, r9
 80037d2:	414b      	adcs	r3, r1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037e2:	4659      	mov	r1, fp
 80037e4:	00cb      	lsls	r3, r1, #3
 80037e6:	4651      	mov	r1, sl
 80037e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ec:	4651      	mov	r1, sl
 80037ee:	00ca      	lsls	r2, r1, #3
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	4642      	mov	r2, r8
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80037fc:	464b      	mov	r3, r9
 80037fe:	460a      	mov	r2, r1
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	677b      	str	r3, [r7, #116]	@ 0x74
 8003806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800380a:	2200      	movs	r2, #0
 800380c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800380e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800381c:	4649      	mov	r1, r9
 800381e:	008b      	lsls	r3, r1, #2
 8003820:	4641      	mov	r1, r8
 8003822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003826:	4641      	mov	r1, r8
 8003828:	008a      	lsls	r2, r1, #2
 800382a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800382e:	f7fc fcd1 	bl	80001d4 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <LL_USART_SetBaudRate+0x458>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	@ 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	3332      	adds	r3, #50	@ 0x32
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <LL_USART_SetBaudRate+0x458>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	b29b      	uxth	r3, r3
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	b29b      	uxth	r3, r3
 800385a:	4423      	add	r3, r4
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	51eb851f 	.word	0x51eb851f

08003878 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fd8c 	bl	80033a8 <LL_USART_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d149      	bne.n	800392a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800389e:	f023 030c 	bic.w	r3, r3, #12
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6851      	ldr	r1, [r2, #4]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	6912      	ldr	r2, [r2, #16]
 80038b0:	4311      	orrs	r1, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	6992      	ldr	r2, [r2, #24]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fd83 	bl	80033d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fd90 	bl	80033f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fc9a 	bl	8003214 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <LL_USART_Init+0xbc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e00c      	b.n	8003908 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <LL_USART_Init+0xc0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d102      	bne.n	80038fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e005      	b.n	8003908 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0f      	ldr	r2, [pc, #60]	@ (800393c <LL_USART_Init+0xc4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff fd79 	bl	800341c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800392a:	7ffb      	ldrb	r3, [r7, #31]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40011000 	.word	0x40011000
 8003938:	40004400 	.word	0x40004400
 800393c:	40011400 	.word	0x40011400

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	@ (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	@ (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	@ (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	@ (8003984 <__libc_init_array+0x44>)
 8003954:	f000 f818 	bl	8003988 <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08003a14 	.word	0x08003a14
 800397c:	08003a14 	.word	0x08003a14
 8003980:	08003a14 	.word	0x08003a14
 8003984:	08003a18 	.word	0x08003a18

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
